        //How many 3 in a rows, how many 2 in a rows ect... :)
        //public int Heuristic(bool turn)
        //{
        //    int dub = 3;
        //    int score = 0;
        //    int increment=-1;
        //    for(int f = 0; f < 2; f++)
        //    {
        //        if (turn)
        //        {
        //            turn = !turn;
        //        }
        //        else
        //        {
        //            increment = 1;
        //            dub = 30;
        //        }
        //        List<int> Total = new List<int> { 0, 0, 0, 0 };
        //        for (int g = 0; g <= 3; g++)
        //        {
        //            for (int h = 0; h <= 4; h++)
        //            {
        //                for (int k = 0; k <= 2; k++)
        //                {
        //                    for (int l = 0; l <= 2; l++)
        //                    {
        //                        Total[0] += board[k + g][l + h];
        //                        Total[1] += board[l + g][k + h];
        //                    }
        //                    if (Total[0] == dub)
        //                    {
        //                        score += increment;
        //                    }
        //                    if (Total[1] == dub)
        //                    {
        //                        score += increment;
        //                    }
        //                    Total[0] = 0;
        //                    Total[1] = 0;
        //                }
        //                for (int k = 0; k <= 2; k++)
        //                {
        //                    Total[2] += board[g + k][h + k];
        //                    Total[3] += board[g + 2 - k][h + k];
        //                }
        //                if (Total[2] == dub)
        //                {
        //                    score += increment;
        //                }
        //                if (Total[3] == dub)
        //                {
        //                    score += increment;
        //                }
        //                Total[2] = 0;
        //                Total[3] = 0;
        //            }
        //        }
        //    }
        //    return score;
        //}

        //public int Heuristic2(bool turn)
        //{
        //    int score = 0;

        //    for(int h = 0; h < 2; h++)
        //    {
        //        for(int i = 0; i < 7; i++)
        //        {
        //            for(int j = 0; j < 6; j++)
        //            {
        //                if (board[j][i]== 1)
        //                {
        //                    score -= heuristic[j][i];
        //                }
        //                if (board[j][i] == 10)
        //                {
        //                    score += heuristic[j][i];
        //                }
        //            }
        //        }
        //    }
        //    return score;
        //}







//        public int AI(int depth)
//        {
//            return Minmax(5, true, 0, board).Item2;
//            int col=ran.Next(0,7);
//            col = 5;
//            int bestScore = 51;

//            for (int i = 0; i < 7; i++)
//            {
//                int row = Int16.Parse(CheckPlace(i,board).ToString());
//                if (CheckPlace(i,board) != 8)
//                {
//                    board[row][i]=1;
//                    int score = Minmax(3, true,0,board).Item1;
//                    board[row][i] = 0;
//                    Debug.WriteLine(score);

//                    if (score < bestScore)
//                    {
//                        bestScore = score;
//                        col = i;
//                    }
//                    if (bestScore < 0)
//                    {
//                        return col;
//                    }
//                }
//            }
//            return col;
//        }

//        private (int,int) Minmax(int de, bool turn,int count,List<List<int>> board1)
//        {
//            if (WinningMove(true,board1))
//            {
////AI wins
//                for(int j = 0; j < 7; j++)
//                {
//                    for(int i = 0; i < 6; i++)
//                    {
//                        Debug.Write(board1[i][j] + " ");
//                    }
//                }
//                Debug.WriteLine("");
//                return (-60+count,0);
//            }
//            if (WinningMove(false,board1))
//            {
////Player wins
//                return (60-count,0);
//            }
//            int counter = 0;
//            for (int i = 0; i < 7; i++)
//            {
//                if (CheckPlace(i,board) == 8)
//                {
//                    counter++;
//                }
//            }
//            if (counter >= 6)
//            {
//                return (0,0);
//            }
//            if (de <= 0)
//            {
//                return (0,0);
//            }
//            int score;
//            int bestScore;
//            int x;
//            int col = 0;
//            if (turn)
//            {
//                bestScore = -60;
//                for(int i = 0; i < 7; i++)
//                {
//                    x = CheckPlace(i,board1);
//                    if (x != 8)
//                    {
//                        List<List<int>> newBoard = new List<List<int>> { };
//                        for (int j = 0; j <6; j++)
//                        {
//                            newBoard.Add(board1[j]);
//                        }
//                        newBoard[x][i] = 10;
//                        score = Minmax(de-1, false,count+1,newBoard).Item1;
//                        newBoard[x][i] = 0;
//                        if (score > bestScore)
//                        {
//                            bestScore = score;
//                            col = x;
//                        }
//                    }
//                }
//                return (bestScore,col);
//            }

//            else
//            {
//                bestScore = 60;
//                for (int i = 0; i < 6; i++)
//                {
//                    x = CheckPlace(i,board1);
//                    if (x != 8)
//                    {
//                        List<List<int>> newBoard = new List<List<int>>();
//                        for(int j = 0; j < 6; j++)
//                        {
//                            newBoard.Add(board1[j]);
//                        }
//                        newBoard[x][i] = 1;
//                        score = Minmax(de-1, true,count+1,newBoard).Item1;
//                        newBoard[x][i] = 0;

//                        if (score < bestScore)
//                        {
//                            bestScore = score;
//                            col = x;
//                        }
//                    }
//                }
//                return (bestScore,col);
//            }
//        }

        //private bool WinningMove(bool flag,List<List<int>> bo)
        //{
        //    int num = 10;
        //    if (flag)
        //    {
        //        num = 1;
        //    }
        //    int x;
        //    for (int i = 0; i < 7; i++)
        //    {
        //        x = CheckPlace(i);
        //        if (x != 8)
        //        {
        //            bo[x][i]=num;
        //            if (WinCheck(flag))
        //            {
        //                bo[x][i] = 0;
        //                return true;
        //            }
        //            bo[x][i] = 0;
        //        }
        //    }
        //    return false;
        //}